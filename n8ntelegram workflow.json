{
  "name": "n8ntelegram workflow",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "download": true
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -352,
        -48
      ],
      "id": "193552c4-95ae-4d7b-8d3b-45ddd9540e78",
      "name": "Telegram Trigger",
      "webhookId": "31a4b01b-58d7-4178-8057-774a7790c5ac",
      "credentials": {
        "telegramApi": {
          "id": "qBbVoEUqzHaZn1XT",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.photo }}",
        "options": {
          "systemMessage": "Please use HTML in your response (no markdown) and only use the following HTML tags in your response : \n<i> or <em> for italic text\n<s>, <strike>, or <del> for <s>strikethrough</s> text\n<span class=\"tg-spoiler\"> or <tg-spoiler> for spoiler text\n<a href=\"URL\"> for inline URLs\n<code> for inline fixed-width code\n<pre> for pre-formatted fixed-width code blocks.\ndonot use ( strictly) tag: <p>, <ul> and <b>\nnever use tag \"p\" ( donot use in your use response) tag \"br\" ( donot use in your responses)  tag \"ul\" ( donot use in your responses)\nyou are the professional waste segregator, Analyze and identify the item correctly ( single one) which is in image and identify the type of waste. For the waste item identified, provide a list of categories it falls under from the following list: Organic wastes, non-organic wastes, degradable wastes, non-degradable wastes, plastic wastes, non-plastic wastes, recyclable wastes, non-recyclable wastes, hazardous waste, wet waste, electronic waste, dry waste, chemical waste then a summary or concise list instead of a detailed breakdown in the response.\nplease give me the text in plain text html without anything else"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -80,
        -32
      ],
      "id": "e8004ca8-ed9e-4ffb-88f3-14d264a515e0",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -96,
        208
      ],
      "id": "16478eac-9938-4bc6-a4ef-52296d1426eb",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "pc1nWPNkEYsGMOmy",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "notes": "Analyze and identify the object which is in image."
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.final_message }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        544,
        -32
      ],
      "id": "e7c38031-371f-4104-b9d7-358ddf63f760",
      "name": "Send a text message1",
      "webhookId": "22814b47-9191-4b7b-bb99-bf8b7d7bd402",
      "credentials": {
        "telegramApi": {
          "id": "qBbVoEUqzHaZn1XT",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.message.chat.id }}",
        "contextWindowLength": 2
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        96,
        224
      ],
      "id": "4d367f0c-5898-4321-8a88-992feaa73b7a",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const item = items[0].json;\n\n// Safely read the 'output' property from the previous node\nlet inputMessage = item.output || item.final_message || ''; \n\n// 1. Sanitize and Convert to Pure HTML\nif (typeof inputMessage === 'string' && inputMessage.length > 0) {\n    \n    // ðŸ’¥ NEW FIX: Convert <ul> and <li> to plain text/HTML breaks\n    inputMessage = inputMessage.replace(/<ul[^>]*>/g, '<br>'); // Replace <ul> with a line break\n    inputMessage = inputMessage.replace(/<\\/ul>/g, '<br><br>'); // Replace </ul> with two line breaks\n    inputMessage = inputMessage.replace(/<li[^>]*>/g, 'â€” '); // Replace <li> with a list dash and space\n    inputMessage = inputMessage.replace(/<\\/li>/g, '<br>'); // Replace </li> with a line break\n\n    // FIX 3 (Previous): Remove the unsupported <span> tags\n    inputMessage = inputMessage.replace(/<span[^>]*>|<\\/span>/g, '');\n    \n    // FIX 2 (Previous): Replace the JSON newline sequence (\\n) with a space \n    inputMessage = inputMessage.replace(/\\\\n/g, ' '); \n    \n    // FIX 1 (Previous): Decode the HTML entity for the en-dash\n    inputMessage = inputMessage.replace(/&ndash;/g, 'â€”'); \n    \n    // Trim any leading/trailing whitespace\n    inputMessage = inputMessage.trim();\n}\n\n// 2. Add Fallback\nlet finalMessage = inputMessage;\n// ... (omitted fallback code for brevity)\n\n// 3. Return the Cleaned HTML\nreturn [{\n    json: {\n        final_message: finalMessage \n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        -32
      ],
      "id": "abfb6920-936f-4464-9e54-c846726b4c14",
      "name": "Code in JavaScript"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "18bcfffc-dbb5-40ee-896f-56808eb1c469",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bffb7c0d435ed2da98e64bb6cdd697749a87bf3ba6729684ca0a3f264f035431"
  },
  "id": "q9jTpb8MNX2NiT8V",
  "tags": []
}